const { ethers } = require('ethers')
const fs = require("fs")
require('dotenv').config()

async function main() {
    // S1) Compile the contract then get the abi and binary file
    //http://127.0.0.1:8545

    // Create a provider to connect to the blockchain
    const provider = new ethers.providers.JsonRpcProvider(process.env.RPC_URL)

    // Creating a wallet to sign the transactions
    const wallet = new ethers.Wallet(process.env.PRIVATE_KEY, provider);

    //Now Reading the abi and binary file using fs 
    const abi = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.abi", "utf8");
    const binary = fs.readFileSync("./SimpleStorage_sol_SimpleStorage.bin", "utf-8")

    // Now for Deploying are contract using the Contract Factory instance
    const contractFactory = new ethers.ContractFactory(abi, binary, wallet);
    console.log("Deploying Please wait....")

    // Synchronously waiting for the contract to be deployed !!!
    const contract = await contractFactory.deploy();

    console.log(`Contract Address is ${contract.address}`);

    // Wait for 1 block confirmation 
    //Transaction Receipt Vs Transaction Response
    // Receipt is the confirmation of N number of blocks being confirmed
    // transaction response is received when we successfully deploy the contract

    // ################### Manual Transaction creation ######################
    // Getting the nonce, with the help of getting the no. of transactions signed using the wallet
    // const nonce = await wallet.getTransactionCount(); // Unique for each trx

    // // Note the data is the Contract compiled to its byte code format !!!
    // // Note: It should be in hex format
    // const tx = {
    //     nonce: nonce,
    //     gasPrice: 100000000000,
    //     gasLimit: 1000000,
    //     to: null,
    //     value: 0,
    //     data: "0x6080604052607b5f5560ea6001557f6361740000000000000000000000000000000000000000000000000000000000600255348015603b575f5ffd5b5061098a806100495f395ff3fe608060405234801561000f575f5ffd5b506004361061007b575f3560e01c80638f7d59b8116100595780638f7d59b8146100d757806395679e46146100f35780639b4e2cdd14610123578063a2f9eac6146101415761007b565b80632f3c602e1461007f5780634f2be91f1461009d5780636057361d146100bb575b5f5ffd5b610087610172565b6040516100949190610317565b60405180910390f35b6100a561017b565b6040516100b2919061034e565b60405180910390f35b6100d560048036038101906100d091906103a2565b610183565b005b6100f160048036038101906100ec9190610509565b61018c565b005b61010d60048036038101906101089190610563565b610215565b60405161011a9190610317565b60405180910390f35b61012b610242565b6040516101389190610317565b60405180910390f35b61015b600480360381019061015691906103a2565b61024a565b60405161016992919061060a565b60405180910390f35b5f600454905090565b5f6002905090565b805f8190555050565b5f6040518060400160405280848152602001838152509050600581908060018154018082558091505060019003905f5260205f2090600202015f909190919091505f820151815f015560208201518160010190816101ea9190610835565b505050826006836040516101fe919061093e565b908152602001604051809103902081905550505050565b6006818051602081018201805184825260208301602085012081835280955050505050505f915090505481565b5f5f54905090565b60058181548110610259575f80fd5b905f5260205f2090600202015f91509050805f01549080600101805461027e90610665565b80601f01602080910402602001604051908101604052809291908181526020018280546102aa90610665565b80156102f55780601f106102cc576101008083540402835291602001916102f5565b820191905f5260205f20905b8154815290600101906020018083116102d857829003601f168201915b5050505050905082565b5f819050919050565b610311816102ff565b82525050565b5f60208201905061032a5f830184610308565b92915050565b5f63ffffffff82169050919050565b61034881610330565b82525050565b5f6020820190506103615f83018461033f565b92915050565b5f604051905090565b5f5ffd5b5f5ffd5b610381816102ff565b811461038b575f5ffd5b50565b5f8135905061039c81610378565b92915050565b5f602082840312156103b7576103b6610370565b5b5f6103c48482850161038e565b91505092915050565b5f5ffd5b5f5ffd5b5f601f19601f8301169050919050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b61041b826103d5565b810181811067ffffffffffffffff8211171561043a576104396103e5565b5b80604052505050565b5f61044c610367565b90506104588282610412565b919050565b5f67ffffffffffffffff821115610477576104766103e5565b5b610480826103d5565b9050602081019050919050565b828183375f83830152505050565b5f6104ad6104a88461045d565b610443565b9050828152602081018484840111156104c9576104c86103d1565b5b6104d484828561048d565b509392505050565b5f82601f8301126104f0576104ef6103cd565b5b813561050084826020860161049b565b91505092915050565b5f5f6040838503121561051f5761051e610370565b5b5f61052c8582860161038e565b925050602083013567ffffffffffffffff81111561054d5761054c610374565b5b610559858286016104dc565b9150509250929050565b5f6020828403121561057857610577610370565b5b5f82013567ffffffffffffffff81111561059557610594610374565b5b6105a1848285016104dc565b91505092915050565b5f81519050919050565b5f82825260208201905092915050565b8281835e5f83830152505050565b5f6105dc826105aa565b6105e681856105b4565b93506105f68185602086016105c4565b6105ff816103d5565b840191505092915050565b5f60408201905061061d5f830185610308565b818103602083015261062f81846105d2565b90509392505050565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f600282049050600182168061067c57607f821691505b60208210810361068f5761068e610638565b5b50919050565b5f819050815f5260205f209050919050565b5f6020601f8301049050919050565b5f82821b905092915050565b5f600883026106f17fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff826106b6565b6106fb86836106b6565b95508019841693508086168417925050509392505050565b5f819050919050565b5f61073661073161072c846102ff565b610713565b6102ff565b9050919050565b5f819050919050565b61074f8361071c565b61076361075b8261073d565b8484546106c2565b825550505050565b5f5f905090565b61077a61076b565b610785818484610746565b505050565b5b818110156107a85761079d5f82610772565b60018101905061078b565b5050565b601f8211156107ed576107be81610695565b6107c7846106a7565b810160208510156107d6578190505b6107ea6107e2856106a7565b83018261078a565b50505b505050565b5f82821c905092915050565b5f61080d5f19846008026107f2565b1980831691505092915050565b5f61082583836107fe565b9150826002028217905092915050565b61083e826105aa565b67ffffffffffffffff811115610857576108566103e5565b5b6108618254610665565b61086c8282856107ac565b5f60209050601f83116001811461089d575f841561088b578287015190505b610895858261081a565b8655506108fc565b601f1984166108ab86610695565b5f5b828110156108d2578489015182556001820191506020850194506020810190506108ad565b868310156108ef57848901516108eb601f8916826107fe565b8355505b6001600288020188555050505b505050505050565b5f81905092915050565b5f610918826105aa565b6109228185610904565b93506109328185602086016105c4565b80840191505092915050565b5f610949828461090e565b91508190509291505056fea26469706673582212200e185f44667d8abc9a212c48f717cdaa9cdb0d5cfe25ab8ac3facab75be0592f64736f6c634300081d0033",
    //     chainId: 31337
    // }

    // console.log("Let's deploy another! Please wait...")
    // // const signTx = await wallet.signTransaction(tx);

    // // By the function defin of sendTransaction(), it signs the transaction in it
    // const sendTx = await wallet.sendTransaction(tx);
    // console.log(sendTx);

    // #################### Calling the Functions in the Contract############

    const initResp = await contract.reterive();
    console.log(`Initial favNum is ${initResp}`);

    const transactResponse = await contract.store("7"); // ethers js Converts it into number eventually     
    const transactReceipt = await transactResponse.wait(1);

    const finalResp = await contract.reterive();
    console.log(`Finally the Number is ${finalResp}`)

}

main()
    .then(() => process.exit(0))
    .catch((error) => {
        console.error(error);
        process.exit(1);
    })